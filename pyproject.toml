[project]
name = "business-intelligence-rag"
version = "1.0.0"
description = "Business Intelligence RAG System with CSV analysis and document processing"
requires-python = ">=3.10"
dependencies = [
    # Core dependencies
    "streamlit>=1.29.0",
    "pandas>=2.1.4,<2.2", # compatibile con GE 1.5.11
    "numpy<2.0", # evita NumPy 2.x che spingerebbe pandas>=2.2
    "plotly>=5.18.0",
    # LlamaIndex and RAG
    "llama-index>=0.9.29",
    "llama-index-vector-stores-qdrant>=0.1.3",
    "llama-index-llms-openai>=0.1.5",
    "llama-index-embeddings-openai>=0.1.6",
    # Vector Store
    "qdrant-client>=1.7.0",
    # LLM
    "openai>=1.6.1",
    # Document Processing
    "pypdf>=3.17.4",
    "python-docx>=1.1.0",
    "openpyxl>=3.1.2",
    "python-multipart>=0.0.6",
    # Utils
    "python-dotenv>=1.0.0",
    "pydantic",
    "pydantic-settings",
    "babel>=2.17.0",
    "rapidfuzz>=3.14.0",
    "rank-bm25>=0.2.2",
    "sentence-transformers>=5.1.0",
    "python-magic>=0.4.27",
    "scalar-fastapi>=1.3.0",
    "pytesseract>=0.3.13",
    "pillow>=11.3.0",
    "reportlab>=4.4.3",
    "prefect>=3.4.17",
    "great-expectations>=1.5.11",
    "pymupdf>=1.26.4",
    "beautifulsoup4>=4.13.5",
    "lxml>=6.0.1",
    "xmltodict>=0.15.0",
    "tabula-py>=2.10.0",
    "forex-python>=1.9.2",
    "pdfplumber>=0.11.7",
    "dvc>=3.63.0",
    "pyjwt>=2.10.1",
    "duckdb>=1.3.2",
    "jose>=1.0.0",
    "python-jose[cryptography]>=3.5.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
    "bandit>=1.7.5",
    "safety>=2.3.0",
]

test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0", 
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0",
    "factory-boy>=3.3.0",
    "faker>=19.0.0",
]

[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
"src" = ["py.typed"]

# Black configuration
[tool.black]
line-length = 120
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Ruff configuration
[tool.ruff]
target-version = "py39"
line-length = 120
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-argument
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "B905",  # zip without explicit strict parameter
    "C901",  # too complex
    "W191",  # indentation contains tabs
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*.py" = [
    "S101",   # asserts allowed in tests
    "ARG",    # unused function args -> fixtures nevertheless are functionally relevant
    "FBT",    # don't care about booleans as positional arguments in tests
    "PLR2004", # Magic value used in comparison
    "S311",   # Standard pseudo-random generators are not suitable for cryptographic purposes
]

[tool.ruff.isort]
known-first-party = ["src"]
force-sort-within-sections = true

# MyPy configuration
[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
ignore_missing_imports = false
no_implicit_optional = true
no_implicit_reexport = true
show_error_codes = true
strict_equality = true
strict_optional = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = [
    "streamlit.*",
    "plotly.*", 
    "qdrant_client.*",
    "llama_index.*",
    "docx.*",
    "PyPDF2.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
markers = [
    "unit: marks tests as unit tests (deselect with '-m \"not unit\"')",
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
    "e2e: marks tests as end-to-end tests (deselect with '-m \"not e2e\"')",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "tests/*",
    "src/*/__init__.py",
    "src/presentation/streamlit/*",  # Streamlit apps are harder to test
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

# Bandit configuration (security linting)
[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
tests = ["B201", "B301", "B401", "B501", "B601"]
skips = ["B101", "B601"]
