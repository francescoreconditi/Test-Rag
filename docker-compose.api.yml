version: '3.8'

services:
  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:v1.7.0
    container_name: rag_qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_storage:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    networks:
      - rag_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Business Intelligence RAG API
  rag_api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: rag_api
    ports:
      - "8000:8000"
    depends_on:
      qdrant:
        condition: service_healthy
    environment:
      # API Configuration
      - PYTHONPATH=/app
      - ENVIRONMENT=production
      
      # Qdrant Configuration
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - QDRANT_COLLECTION_NAME=business_documents
      
      # OpenAI Configuration (set your API key)
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LLM_MODEL=gpt-4o-mini
      - EMBEDDING_MODEL=text-embedding-3-small
      - TEMPERATURE=0.1
      - MAX_TOKENS=4096
      
      # RAG Configuration
      - RAG_RESPONSE_MODE=compact
      - RAG_SIMILARITY_TOP_K=3
      - RAG_ENABLE_CACHING=true
      - RAG_CHUNK_SIZE=1000
      - RAG_CHUNK_OVERLAP=200
      
      # Enterprise Features
      - HF_HUB_DISABLE_SYMLINKS_WARNING=1
      
      # Logging
      - LOG_LEVEL=INFO
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config:ro
    networks:
      - rag_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # Angular Frontend (optional)
  rag_frontend:
    build:
      context: ./dash_ang
      dockerfile: Dockerfile
    container_name: rag_frontend
    ports:
      - "4200:80"
    depends_on:
      - rag_api
    environment:
      - API_URL=http://localhost:8000
    networks:
      - rag_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: rag_nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - rag_api
      - rag_frontend
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - rag_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Redis for Caching (optional)
  redis:
    image: redis:7-alpine
    container_name: rag_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - rag_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru

volumes:
  qdrant_storage:
    driver: local
  redis_data:
    driver: local

networks:
  rag_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Environment-specific overrides
# Development: docker-compose -f docker-compose.api.yml -f docker-compose.dev.yml up
# Production: docker-compose -f docker-compose.api.yml up